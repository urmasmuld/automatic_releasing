name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Determine Version Bump
        id: version
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
          if [[ $COMMIT_MESSAGE == "Patch:"* ]]; then
            echo "::set-output name=version-bump::patch"
          elif [[ $COMMIT_MESSAGE == "Minor:"* ]]; then
            echo "::set-output name=version-bump::minor"
          elif [[ $COMMIT_MESSAGE == "Major:"* ]]; then
            echo "::set-output name=version-bump::major"
          fi
        shell: bash

      - name: Fetch Tags
        run: git fetch --tags

      - name: Bump Version and Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_BUMP=$(echo ${{ steps.version.outputs.version-bump }})
          if [ "$VERSION_BUMP" == "patch" ]; then
            npm --no-git-tag-version version patch
          elif [ "$VERSION_BUMP" == "minor" ]; then
            npm --no-git-tag-version version minor
          elif [ "$VERSION_BUMP" == "major" ]; then
            npm --no-git-tag-version version major
          # If no major,minor or patch in commit message, then consider it to be patch
          else
            npm --no-git-tag-version version patch
          fi

          # Use "0.0.1" as the default version if no tags were found
          TAG=$(git describe --abbrev=0 --tags HEAD || echo "$(node -p "require('./package.json').version")")

          TITLE="Release $TAG"
          BODY=$(git log -1 --pretty=format:%s)

          # Commit and push the updated package.json and the release body
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add package.json
          git commit -m "Bump version to $TAG"
          git tag -a -m "Release $TAG" "$TAG"
          git push --follow-tags

          # Create the release
          response=$(curl -X POST "https://api.github.com/repos/${{ github.repository }}/releases" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{
              \"tag_name\": \"${TAG}\",
              \"name\": \"${TITLE}\",
              \"body\": \"${BODY}\",
              \"draft\": false,
              \"prerelease\": false
            }")

          # Extract the release ID from the API response
          RELEASE_ID=$(echo "$response" | jq -r '.id')
          # Extract the release ID from the API response
          RELEASE_ID=$(echo "$response" | jq -r '.id')

          # Mark the release as a prerelease
          # Check if $TAG starts with "0."
          if [[ $TAG == 0.* ]]; then
            PRERELEASE=true
          else
            PRERELEASE=false
          fi

          curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{
              \"prerelease\": $PRERELEASE
            }"
